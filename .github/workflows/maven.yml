# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  docker_image_name: 'academy'
  docker_tag_name: 'quack1'
  artifact_name: 'artifactoooooo'
jobs:
  build:

    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: academy
          POSTGRES_USER: academy
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Custom Action Build
        uses: ./.github/actions/maven_build

      - name: Create Docker Image
        uses: ./.github/actions/docker_build
        with:
          image_name: $docker_image_name
          tag_name: $docker_tag_name

      - name: Save image On File
        run: docker save -o "${{ env.docker_image_name }}.tar" $docker_image_name:$docker_tag_name

      - name: Upload File
        uses: actions/upload-artifact@v4
        with:
          name: $artifact_name
          path: ${{ env.docker_image_name }}.tar


  coisa_build:

    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: $artifact_name

      - name: Load Docker Image
        run: docker load -i ${{ env.docker_image_name }}.tar

      - name: List Images
        run: docker image ls

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push
        uses: ./.github/actions/docker_push
        with:
          dockerhub_user: ${{ secrets.DOCKERHUB_USERNAME }}
          image_ref: "${{ env.docker_image_name }}:${{ env.docker_tag_name }}"


